const express = require("express");
const crypto = require("crypto");
const db = require("../../../db"); // DB Postgres ho·∫∑c MySQL
require("dotenv").config();

const router = express.Router();

/**
 * @swagger
 * /payment/casso/webhook:
 *   post:
 *     summary: Webhook nh·∫≠n th√¥ng tin giao d·ªãch t·ª´ Casso
 *     description: |
 *       Casso s·∫Ω g·ªçi endpoint n√†y khi c√≥ giao d·ªãch n·∫°p/r√∫t ti·ªÅn.
 *       H·ªá th·ªëng x√°c th·ª±c ch·ªØ k√Ω (signature), c·ªông coin cho t√†i kho·∫£n v√† ghi l·ªãch s·ª≠ giao d·ªãch.
 *     tags:
 *       - Payment
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               data:
 *                 type: object
 *                 example:
 *                   transactions:
 *                     - accountNumber: "123456"
 *                       amount: 2000
 *                       description: "N·∫°p coin"
 *               signature:
 *                 type: string
 *                 example: "abcdef123456..."
 *     responses:
 *       200:
 *         description: Webhook x·ª≠ l√Ω th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "OK"
 *       400:
 *         description: D·ªØ li·ªáu ho·∫∑c ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá
 *       500:
 *         description: L·ªói h·ªá th·ªëng
 */

router.post("/casso/webhook", async (req, res) => {
    try {
        const { data, signature } = req.body;
        if (!data || !signature)
            return res.status(400).json({ error: "Thi·∫øu data ho·∫∑c signature" });

        // 1Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu th√†nh string ƒë·ªÉ t·∫°o HMAC
        const rawData = JSON.stringify(data);

        // 2Ô∏è‚É£ T·∫°o HMAC SHA256 v·ªõi key trong env
        const computedSignature = crypto
            .createHmac("sha256", process.env.CASSO_FLOW_CHECKSUM_KEY)
            .update(rawData)
            .digest("hex");

        if (computedSignature !== signature)
            return res.status(400).json({ error: "Sai signature, c√≥ th·ªÉ gi·∫£ m·∫°o" });

        // 3Ô∏è‚É£ X·ª≠ l√Ω t·ª´ng giao d·ªãch
        const transactions = data.transactions || [];
        for (const tx of transactions) {
            const amount = Number(tx.amount || 0);
            const description = tx.description || "Giao d·ªãch t·ª´ Casso";
            const accountId = process.env.TARGET_ACCOUNT_ID || 1; // c√≥ th·ªÉ map t·ª´ tx.accountNumber

            await db.query(
                `UPDATE account SET coin = coin + $1 WHERE "accountId" = $2`,
                [amount, accountId]
            );

            await db.query(
                `INSERT INTO transaction_history ("accountId", dats, transaction_data, coin_change)
         VALUES ($1, NOW(), $2, $3)`,
                [accountId, description, amount]
            );

            console.log(`‚úÖ C·ªông ${amount} coin cho accountId = ${accountId}`);
        }

        res.json({ message: "OK" });
    } catch (err) {
        console.error("üî• L·ªói webhook Casso:", err);
        res.status(500).json({ error: err.message });
    }
});

module.exports = router;
